#!/bin/sh

e2e_test_install() {
  NODE_LABEL_KEY="$(random_string)"
  NODE_LABEL_VALUE="$(random_string)"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set-string "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE"
}

e2e_test() {
  run_test "Trying to delete sgpoolconfigs with cluster running" delete_with_cluster

  run_test "Trying to delete sgpoolconfigs without a cluster running" delete_whitout_cluster
}

delete_with_cluster() {
  if ERROR_MESSAGE="$( { kubectl delete -n "$CLUSTER_NAMESPACE" sgpoolconfigs.stackgres.io pgbouncerconf; } 2>&1 )"
  then
    echo "ERROR: It should not be able to delete pgbouncerconf"
    return 1
  else
    success "Good it has failed"
  fi
  
  echo "$ERROR_MESSAGE" > "${LOG_PATH}/test1.log"

  if grep -q "Can't delete sgpoolconfigs.stackgres.io pgbouncerconf" "$LOG_PATH/test1.log"
  then
    success "Error message was the expected"
    return 0
  else
    ERROR="$(cat "$LOG_PATH/test1.log")"
    fail "Error is not what it should be. ERROR: ${ERROR}"
  fi
}

delete_whitout_cluster() {
  kubectl get -n "$CLUSTER_NAMESPACE" sgclusters.stackgres.io "$CLUSTER_NAME" -o yaml | kubectl delete -f - > /dev/null

  if kubectl delete -n "$CLUSTER_NAMESPACE" sgpoolconfigs.stackgres.io pgbouncerconf
  then
    success "Good. It has deleted the configuration"
    return 0
  else
    ERROR="$(kubectl delete -n "$CLUSTER_NAMESPACE" sgpoolconfigs.stackgres.io pgbouncerconf)"
    fail "It should be able to delete the pgbouncerconf. ERROR $ERROR"
  fi
}
