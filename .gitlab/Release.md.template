<!--

Set title to:

```
Release StackGres $VERSION
```

Generate template using the command:

```
sh stackgres-k8s/ci/utils/generate-release-template.sh \$VERSION
```

-->

# Pre Checks

1. [ ] Make sure all tasks marked with label ~"target_version::${VERSION}" are done.

# Release steps

$(
  if "$IS_NEW_MINOR_VERSION"
  then
    cat << EOF
1. [ ] Create local branch `release-${VERSION}` from `main`:
    ```
    git checkout "main" && git pull && git checkout -b "release-${VERSION}"
    ```
EOF
  else
    cat << EOF
1. [ ] Create local branch `release-${VERSION}` from `main-${MINOR_VERSION}`:
    ```
    git checkout "main-${MINOR_VERSION}" && git pull && git checkout -b "release-${VERSION}"
    ```
EOF
  fi
)
1. [ ] Update project version to `${VERSION}`:
    ```
    sh -x stackgres-k8s/ci/utils/update-version.sh "${VERSION}"
    ```
1. [ ] Update `CHANGELOG.md` (review commit messages to populate the changelog: `git log`)
1. [ ] Add ${VERSION} section in `doc/content/en/01-introduction/06-versions/_index.md` with values from `stackgres-k8s/src/common/src/main/resources/versions.properties`
1. [ ] Check the changes to ensure everything is correct before commit:
    ```
    git diff
    ```
1. [ ] Commit changes with message `version: ${VERSION}`:
    ```
    git commit -S -a -m "version: ${VERSION}"
    ```
1. [ ] Push `release-${VERSION}` branch:

     **This step requires at least one ARM instance with docker installed and a gitlab runner registered with the StackGres project. All this setup is already built in a template. The only action we need to do is scale up the auto-scaling group `sg-army-builder` auto scaling group.** 

     ```
     for ASG in sg-army-builder; do aws --profile ongres --region us-east-1 autoscaling set-desired-capacity --desired-capacity 1 --auto-scaling-group-name "\$ASG"; done
     ```

     **As an alternative approach [here](https://gitlab.com/snippets/1985684) is a handy snippet that allows to spin up such an instance in AWS.**
     ```
     # Remember to create a key pair called gitlab-runner in the target AWS region
     AMI="\$(aws ssm get-parameters --names /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2 --query "Parameters[].Value" --output text)"
     curl -s https://gitlab.com/snippets/1985684/raw | bash -s -- -r "\$GITLAB_TOKEN" -t m6gd.4xlarge -i "\$AMI" -d \$((4 * 60 * 60)) -df internal -dp /dev/nvme1n1 -rn army-builder -tl 'docker-junit-extension-runner, oci-image, ongresinc, stackgres-maven-runner, stackgres-native-build-runner, stackgres-quarkus-test-runner, stackgres-runner-v2, linux-arm64, stackgres-e2e-runner'
     ```

     Now we can push `release-${VERSION}` branch and wait for the pipeline to complete:
    ```
    git push origin "release-${VERSION}" -o ci.variable="DO_IMAGES=true" -o ci.variable="DO_NATIVE=true" -o ci.variable="DO_ARM=true" -o ci.variable="DO_RELEASE_IMAGE=true"
    ```

1. [ ] Perform preflight for operator images (make each of them pass pass the index health check by opening each image project):

    > Registry authnetications (using same format as `~/.docker/config.json`) with short life tokens must be present at path `~/.openshift-certification-auths.json` 
    > 
    > Red Hat Image project ids (using JSON format `{"<image name without tag e.g. quay.io/stackgres/operator>":"<Red Hat image project id>"}`) must be present at path `~/.openshift-certification-projects.json` 

    ```
    cd stackgres-k8s/install/operator-sdk/openshift-certification/
    STACKGRES_VERSION="${VERSION}" IMAGE_TAG="\$(git rev-parse --short=8 HEAD)" sh get-images.sh | grep -F quay.io/stackgres/ | sed 's#quay\.io/stackgres/#registry.gitlab.com/ongresinc/stackgres/stackgres/#' | xargs -I % sh preflight.sh %
    ```

1. [ ] Create tag `${VERSION}`:
    ```
    git tag "${VERSION}"
    ```
1. [ ] Push tag `${VERSION}` to the origin and wait for the pipeline to complete:
    ```
    git push origin "${VERSION}"
    ```
1. [ ] After pipeline succeeded, scale down the ARM runners (or terminate the instance created with the script):
    ```
     aws autoscaling update-auto-scaling-group \
     --auto-scaling-group-name sg-army-builder \
     --min-size 0 \
     --max-size 0 \
      --desired-capacity 0
    ```
1. [ ] Perform preflight for operator images (publish each of them by opening each image project):
    > Registry authnetications (using same format as `~/.docker/config.json`) with short life tokens must be present at path `~/.openshift-certification-auths.json` 
    > 
    > Red Hat Image project ids (using JSON format `{"<image name without tag e.g. quay.io/stackgres/operator>":"<Red Hat image project id>"}`) must be present at path `~/.openshift-certification-projects.json` 

    ```
    cd stackgres-k8s/install/operator-sdk/openshift-certification/
    STACKGRES_VERSION="${VERSION}" IMAGE_TAG="${VERSION}" sh get-images.sh | grep -F quay.io/stackgres/ | xargs -I % sh preflight.sh %
    ```
1. [ ] Create PR on Red Hat Certified Operators (wait for its completion):
    > File that export environment variable `FORK_GIT_URL` with the git URL (make sure user can perform push on such URL) of the project that forks project `https://github.com/redhat-openshift-ecosystem/redhat-marketplace-operators` must be specified in POSIX shell script with path `~/.stackgres/operator-bundle-red-hat-certified-config`

    ```
    cd stackgres-k8s/install/operator-sdk/stackgres-operator/
    . ~/.stackgres/operator-bundle-red-hat-certified-config && sh deploy-to-red-hat-certified.sh
    ```

    > The pipeline may fail and some changes to the operator bunle may be required. Perform such changes only on path `stackgres-k8s/install/operator-sdk/stackgres-operator/` on a separate branch:
    > 
    > ```
    > git checkout -b "fix-bundle-${VERSION}"
    > git add .
    > git commit -m "fix: operator bundle deployment"
    > git push origin "fix-bundle-${VERSION}" -o ci.variable="DO_IMAGES=true" -o ci.variable="DO_NATIVE=true" -o ci.variable="DO_ARM=true" -o ci.variable="DO_RELEASE_IMAGE=true"
    > ```
    > 
    > Repeat the PR creation step above.
    > 
    > When PR is merged create a MR to `main-${VERSION}` branch.
1. [ ] Create PR on Red Hat Marketplace Operators (wait for its completion):
    > File that export environment variable `FORK_GIT_URL` with the git URL (make sure user can perform push on such URL) of the project that forks project `https://github.com/redhat-openshift-ecosystem/certified-operators` must be specified in POSIX shell script with path `~/.stackgres/operator-bundle-red-hat-certified-config`

    ```
    cd stackgres-k8s/install/operator-sdk/stackgres-operator/
    . ~/.stackgres/operator-bundle-red-hat-marketplace-config && sh deploy-to-red-hat-marketplace.sh
    ```

    > The pipeline may fail and some changes to the operator bunle may be required. Perform such changes only on path `stackgres-k8s/install/operator-sdk/stackgres-operator/` on a separate branch:
    > 
    > ```
    > git checkout -b "fix-bundle-${VERSION}"
    > git add .
    > git commit -m "fix: operator bundle deployment"
    > git push origin "fix-bundle-${VERSION}" -o ci.variable="DO_IMAGES=true" -o ci.variable="DO_NATIVE=true" -o ci.variable="DO_ARM=true" -o ci.variable="DO_RELEASE_IMAGE=true"
    > ```
    > 
    > Repeat the PR creation step above.
    > 
    > When PR is merged create a MR to `main-${VERSION}` branch.
1. [ ] Create PR on Red Hat Community Operators (wait for its completion):
    > File that export environment variable `FORK_GIT_URL` with the git URL (make sure user can perform push on such URL) of the project that forks project `https://github.com/redhat-openshift-ecosystem/community-operators-prod` must be specified in POSIX shell script with path `~/.stackgres/operator-bundle-red-hat-community-config`

    ```
    cd stackgres-k8s/install/operator-sdk/stackgres-operator/
    . ~/.stackgres/operator-bundle-red-hat-community-config && sh deploy-to-red-hat-community.sh
    ```

    > The pipeline may fail and some changes to the operator bunle may be required. Perform such changes only on path `stackgres-k8s/install/operator-sdk/stackgres-operator/` on a separate branch:
    > 
    > ```
    > git checkout -b "fix-bundle-${VERSION}"
    > git add .
    > git commit -m "fix: operator bundle deployment"
    > git push origin "fix-bundle-${VERSION}" -o ci.variable="DO_IMAGES=true" -o ci.variable="DO_NATIVE=true" -o ci.variable="DO_ARM=true" -o ci.variable="DO_RELEASE_IMAGE=true"
    > ```
    > 
    > Repeat the PR creation step above.
    > 
    > When PR is merged create a MR to `main-${VERSION}` branch.
1. [ ] Create PR on OperatorHub (wait for its completion):
    > File that export environment variable `FORK_GIT_URL` with the git URL (make sure user can perform push on such URL) of the project that forks project `https://github.com/k8s-operatorhub/community-operators` must be specified in POSIX shell script with path `~/.stackgres/operator-bundle-operatorhub-config`

    ```
    cd stackgres-k8s/install/operator-sdk/stackgres-operator/
    . ~/.stackgres/operator-bundle-operatorhub-config && sh deploy-to-operatorhub.sh
    ```

    > The pipeline may fail and some changes to the operator bunle may be required. Perform such changes only on path `stackgres-k8s/install/operator-sdk/stackgres-operator/` on a separate branch:
    > 
    > ```
    > git checkout -b "fix-bundle-${VERSION}"
    > git add .
    > git commit -m "fix: operator bundle deployment"
    > git push origin "fix-bundle-${VERSION}" -o ci.variable="DO_IMAGES=true" -o ci.variable="DO_NATIVE=true" -o ci.variable="DO_ARM=true" -o ci.variable="DO_RELEASE_IMAGE=true"
    > ```
    > 
    > Repeat the PR creation step above.
    > 
    > When PR is merged create a MR to `main-${VERSION}` branch.
1. [ ] Edit the [release notes of tag ${VERSION}](https://gitlab.com/ongresinc/stackgres/-/releases/new?tag_name=${VERSION}) by Copying and Pasting `CHANGELOG.md` section for version `${VERSION}` (GitLab)
$(
  if "$IS_NEW_MINOR_VERSION"
  then
    cat << EOF
1. [ ] Create branch `main-${MINOR_VERSION}` from `release-${VERSION}`:
    ```
    git checkout -b "main-${MINOR_VERSION}"
    ```
1. [ ] Update project version to `${MINOR_VERSION}.1-SNAPSHOT`:
    ```
    sh -x stackgres-k8s/ci/utils/update-version.sh "${MINOR_VERSION}.1-SNAPSHOT" "main-${MINOR_VERSION}"
    ```
1. [ ] Commit changes with message `version: ${MINOR_VERSION}.1-SNAPSHOT`:
    ```
    git commit -S -a -m "version: ${MINOR_VERSION}.1-SNAPSHOT"
    ```
1. [ ] Push `main-${MINOR_VERSION}` branch:
    ```
    git push --set-upstream origin "main-${MINOR_VERSION}"
    ```
1. [ ] Create branch `add-version-${NEXT_MINOR_VERSION}` and merge local branch `release-${VERSION}` into it:
    ```
    git checkout main && git pull && git checkout -b "add-version-${NEXT_MINOR_VERSION}" && git merge release-${VERSION}
    ```
1. [ ] Update project version to `${NEXT_MINOR_VERSION}.0-SNAPSHOT`:
    ```
    sh -x stackgres-k8s/ci/utils/update-version.sh "${NEXT_MINOR_VERSION}.0"-SNAPSHOT main
    ```
1. Add support for version ${NEXT_MINOR_VERSION} and remove support for version ${TO_REMOVE_MINOR_VERSION}
    * [ ] Edit file `stackgres-k8s/src/common/src/main/java/io/stackgres/common/StackGresVersion.java` to add suppor for version ${NEXT_MINOR_VERSION}, remove support for version ${TO_REMOVE_MINOR_VERSION} and fix the failing code and tests
    * [ ] Edit file `stackgres-k8s/src/common/src/main/java/io/stackgres/common/component/Components.java` to add version ${NEXT_MINOR_VERSION} and fix the failing code and tests
    * [ ] Edit file `stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/conciliation/factory/cluster/patroni/parameters/PostgresDefaultValues.java` to add version ${NEXT_MINOR_VERSION} and fix the failing code and tests
    * [ ] Edit file `stackgres-k8s/install/helm/stackgres-operator/templates/check-upgrade.yaml` to add support for upgrade from version ${NEXT_MINOR_VERSION} and remove support to upgrade from version ${TO_REMOVE_MINOR_VERSION}
    * [ ] Update the e2e test `stackgres-k8s/e2e/spec/operator-helm` to check support for upgrade from version ${MINOR_VERSION} and remove check for support to upgrade from version ${TO_REMOVE_MINOR_VERSION}.
    * [ ] Update the e2e utils `stackgres-k8s/e2e/utils/operator` changing the `STACKGRES_PREVIOUS_VERSION` default value to the previous minor version (`$PREVIOUS_MINOR_VERSION.?`, replace `?` with the latest minor version).
    * [ ] Add support for previous version ${MINOR_VERSION} in e2e tests
        ```
        mkdir -p stackgres-k8s/e2e/spec/previous/${MINOR_VERSION}/spec
        cp stackgres-k8s/e2e/spec/* stackgres-k8s/e2e/spec/previous/${MINOR_VERSION}/spec/.
        cp -a stackgres-k8s/e2e/spec/abstract stackgres-k8s/e2e/spec/previous/${MINOR_VERSION}/spec/abstract
        cp -a stackgres-k8s/e2e/spec/aks stackgres-k8s/e2e/spec/previous/${MINOR_VERSION}/spec/aks
        cp -a stackgres-k8s/e2e/spec/eks stackgres-k8s/e2e/spec/previous/${MINOR_VERSION}/spec/eks
        cp -a stackgres-k8s/e2e/spec/gke stackgres-k8s/e2e/spec/previous/${MINOR_VERSION}/spec/gke
        ```
    * [ ] Remove support for previous version ${TO_REMOVE_MINOR_VERSION} in e2e tests:
        ```
        rm -rf stackgres-k8s/e2e/spec/previous/${TO_REMOVE_MINOR_VERSION}    
        ```
1. [ ] Commit changes with message `version: ${NEXT_MINOR_VERSION}.0-SNAPSHOT`:
    ```
    git add .
    git commit -S -a -m "version: ${NEXT_MINOR_VERSION}.0-SNAPSHOT"
    ```
1. [ ] Push branch `add-version-${NEXT_MINOR_VERSION}`:
    ```
    git push origin add-version-${NEXT_MINOR_VERSION}
    ```
1. [ ] Wait for the pipeline of `add-version-${NEXT_MINOR_VERSION}` branch to complete
1. [ ] Merge local branch `add-version-${NEXT_MINOR_VERSION}` into `main`:
    ```
    git checkout main && git pull && git merge --ff-only add-version-${NEXT_MINOR_VERSION}
    ```
1. [ ] Push `main` to origin:
    ```
    git push
    ```
1. [ ] Change scheduled pipeline description and `STACKGRES_PREVIOUS_VERSION` environment variable to test upgrade from version `${TO_REMOVE_MINOR_VERSION}` to version `${MINOR_VERSION}`: https://gitlab.com/ongresinc/stackgres/-/pipeline_schedules/237754/edit?id=237754
1. [ ] Change scheduled pipeline description and `STACKGRES_VERSION` environment variable to test from version `${TO_REMOVE_MINOR_VERSION}` to version `${MINOR_VERSION}`: https://gitlab.com/ongresinc/stackgres/-/pipeline_schedules/262456/edit?id=262456 or https://gitlab.com/ongresinc/stackgres/-/pipeline_schedules/235791/edit?id=235791
EOF
  else
    cat << EOF
1. [ ] Merge local branch `release-${VERSION}` into `main-${MINOR_VERSION}`:
    ```
    git checkout "main-${MINOR_VERSION}" && git pull && git merge --ff-only "release-${VERSION}"
    ```
1. [ ] Update version to be `${NEXT_PATCH_VERSION}-SNAPSHOT`:
    ```
    sh -x stackgres-k8s/ci/utils/update-version.sh "${NEXT_PATCH_VERSION}-SNAPSHOT" "main-${MINOR_VERSION}"
    git commit -a -m "version: ${NEXT_PATCH_VERSION}-SNAPSHOT"
    git push
    ```
1. [ ] Create branch `merge-${VERSION}` from `main`:
    ```
    git checkout main && git pull && git checkout -b "merge-${VERSION}"
    ```
1. [ ] Merge branch `main-${MINOR_VERSION}` into `merge-${VERSION}`:
    ```
    git merge "main-${MINOR_VERSION}"
    ```
1. [ ] Push `merge-${VERSION}` to origin, create the merge request to merge it into `main` and wait for the pipeline to complete fixing any encountered issues:
    ```
    git push origin "merge-${VERSION}"
    ```
EOF
  fi
)

# Deploy Web

$(
  if "$IS_NEW_MINOR_VERSION"
  then
    cat << EOF
1. [ ] Checkout [stackgres-web](https://gitlab.com/ongresinc/web/stackgres) project
1. [ ] Checkout and update `development` branch:
    ```
    git checkout development && git pull
    ```
1. [ ] Edit `.gitlab-ci.yml`:
  * Change `STACKGRES_REFS` by setting `main-${MINOR_VERSION}` as the first value
  * Change `STACKGRES_FULL_VERSIONS` by setting `${VERSION}` as the first value.
  * Change `STACKGRES_STABLE_VERSION_INDEX` to `0`
1. [ ] Commit changes with message `version: ${VERSION}`:
    ```
    git commit -a -m 'version: ${VERSION}'
    ```
1. [ ] Push development to origin:
    ```
    git push
    ```
1. [ ] Check staging Web: `https://ongresinc.gitlab.io/web/stackgres/`
1. [ ] Merge `development` branch into `master`:
    ```
    git checkout master && git pull && git merge --ff-only development
    ```
1. [ ] Create tag `${VERSION}`:
    ```
    git tag ${VERSION}
    ```
1. [ ] Push master to origin:
    ```
    git push
    ```
1. [ ] Push tag `${VERSION}` to origin:
    ```
    git push origin ${VERSION}
    ```
EOF
  else
    cat << EOF
1. [ ] Checkout [stackgres-web](https://gitlab.com/ongresinc/web/stackgres) project
1. [ ] Checkout and update `development` branch:
    ```
    git checkout development && git pull
    ```
1. [ ] Edit `.gitlab-ci.yml`:
  * Change `STACKGRES_FULL_VERSIONS` by setting `${VERSION}` as the first value.
1. [ ] Commit changes with message `version: ${VERSION}`:
    ```
    git commit -a -m 'version: ${VERSION}'
    ```
1. [ ] Push development to origin:
    ```
    git push
    ```
1. [ ] Check staging Web: `https://ongresinc.gitlab.io/web/stackgres/`
1. [ ] Merge `development` branch into `master`:
    ```
    git checkout master && git pull && git merge --ff-only development
    ```
1. [ ] Create tag `${VERSION}`:
    ```
    git tag ${VERSION}
    ```
1. [ ] Push master to origin:
    ```
    git push
    ```
1. [ ] Push tag `${VERSION}` to origin:
    ```
    git push origin ${VERSION}
    ```
EOF
  fi
)

# Post Checks

* Announcements:
  * [ ] Publish release on Announcement Slack channel
  * [ ] Publish release on Announcement Discord channel

# Changelog

~~~
# :rocket: Release ${VERSION} (\${DATE})

## :notepad_spiral: NOTES

StackGres ${VERSION} is out! :confetti_ball: :champagne: 

So, what you are waiting for to try this release and have a look to the future of StackGres! 

## :sparkles: NEW FEATURES AND CHANGES

Nothing new here! :eyes:

## Web Console

Nothing new here! :eyes:

## :bug: FIXES

Nothing new here! :eyes:

## Web Console

Nothing new here! :eyes:

## :construction: KNOWN ISSUES

* Backups may be restored with inconsistencies when performed with a Postgres instance running on a different architecture ([#1539](https://gitlab.com/ongresinc/stackgres/-/issues/1539))

## :up: UPGRADE

$(
  if "$IS_UPGRADE_VERSION"
  then
    cat << EOF
To upgrade from a previous installation of the StackGres operator's helm chart you will have to upgrade the helm chart release.
 For more detailed information please refer to [our documentation](https://stackgres.io/doc/latest/install/helm/upgrade/#upgrade-operator).

To upgrade StackGres operator's (upgrade only works starting from 1.1 version or above) helm chart issue the following commands (replace namespace and release name if you used something different):

`helm upgrade -n "stackgres" "stackgres-operator" https://stackgres.io/downloads/stackgres-k8s/stackgres/${VERSION}/helm/stackgres-operator.tgz`

> IMPORTANT: This release is incompatible with previous `alpha` or `beta` versions. Upgrading from those versions will require uninstalling completely StackGres including all clusters and StackGres CRDs (those in `stackgres.io` group) first.
EOF
  else
    cat << EOF
Alpha or beta version should not be used to upgrade since the upgrade process will not be tested with next upcoming versions.

> IMPORTANT: Please wait for a release candidate or general availability version for upgrades in production, use this version only for testing purpose!
EOF
  fi
)

Thank you for all the issues created, ideas, and code contributions by the StackGres Community!

## :twisted_rightwards_arrows: [FULL LIST OF COMMITS](https://gitlab.com/ongresinc/stackgres/-/commits/${VERSION})
~~~

/label ~StackGres ~"target_version::${VERSION}" ~"team::DEV" 
/milestone %"StackGres ${VERSION}"
/confidential 
