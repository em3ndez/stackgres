#!/bin/sh

e2e_test_install() {
  RESTORED_CLUSTER_NAME="$(get_sgcluster_name restored-from-gcs)"
  gsutil -m rm -r "gs://stackgres-e2e-$CLUSTER_NAME/" || true

  gcloud iam --project "$K8S_GKE_PROJECT" service-accounts add-iam-policy-binding \
    --role roles/iam.workloadIdentityUser \
    --member "serviceAccount:$K8S_GKE_PROJECT.svc.id.goog[$CLUSTER_NAMESPACE/$CLUSTER_NAME-patroni]" \
    "$K8S_GKE_ACCOUNT_EMAIL"

  gcloud iam --project "$K8S_GKE_PROJECT" service-accounts add-iam-policy-binding \
    --role roles/iam.workloadIdentityUser \
    --member "serviceAccount:$K8S_GKE_PROJECT.svc.id.goog[$CLUSTER_NAMESPACE/$RESTORED_CLUSTER_NAME-patroni]" \
    "$K8S_GKE_ACCOUNT_EMAIL"

  if [ "$K8S_GKE_PROJECT" = "default" ]
  then  
    echo "Creating bucket in default project"
    gsutil mb -l "$K8S_GKE_REGION" \
      -c "standard" \
      "gs://stackgres-e2e-$CLUSTER_NAME/"
  else
    echo "Creating bucket in project $K8S_GKE_PROJECT in region $K8S_GKE_REGION"
    gsutil mb -l "$K8S_GKE_REGION" \
      -p "$K8S_GKE_PROJECT" \
      -c "standard" \
      "gs://stackgres-e2e-$CLUSTER_NAME/"

    echo "Bucket created"
  fi

  kubectl create namespace "$CLUSTER_NAMESPACE"
    
  kubectl create secret generic gke-service-account \
    --from-file="$TARGET_PATH/gke-service-account.json" \
    -n "$CLUSTER_NAMESPACE"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set-string cluster.configurations.shBackupConfig=backupconf \
    --set-string cluster.metadata.annotations.allResources.iam\\.gke\\.io/gcp-service-account="$K8S_GKE_SERVICEACCOUNT@$K8S_GKE_PROJECT.iam.gserviceaccount.com"

  wait_pods_running "$CLUSTER_NAMESPACE" 1
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  wait_until check_connectivity -i 0
  create_mock_data

  BACKUP_NAME="$(get_sgbackup_name "${CLUSTER_NAME}-0-$(shuf -i 0-65535 -n 1)")"
}

e2e_test_uninstall(){
  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"

  gsutil -m rm -r "gs://stackgres-e2e-$CLUSTER_NAME/" || true
}

e2e_test() {
  run_test "Check that backup is executed successfully" execute_backup

  run_test "Check that restoration is executed successfully" restore_from_backup

  run_test "Check restored data integrity" check_restored_data

}

create_mock_data() {
  run_query -p 5432 -h "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" -q "CREATE DATABASE test;"
  run_query -p 5432 -h "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" -q "CREATE TABLE fibonacci(num integer);" -d "test"
  run_query -p 5432 -h "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" -q "INSERT INTO fibonacci(num) VALUES (1);" -d "test"
  run_query -p 5432 -h "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" -q "INSERT INTO fibonacci(num) VALUES (2);" -d "test"
  run_query -p 5432 -h "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" -q "INSERT INTO fibonacci(num) VALUES (3);" -d "test"
}

is_backup_phase() {
  [ "$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" -o=jsonpath='{.status.process.status}')" = "$1" ]
}

execute_backup() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGBackup
metadata:
  namespace: "$CLUSTER_NAMESPACE"
  name: "$BACKUP_NAME"
spec:
  sgCluster: "$CLUSTER_NAME"
  managedLifecycle: false
EOF
  
  wait_until is_backup_phase "Completed"

  success "Backup completed"
}

restore_from_backup() {
  kubectl delete sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"

  BACKUP_UID="$(kubectl get sgbackups.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" -o=jsonpath='{.metadata.uid}')"

  cat <<EOF | kubectl apply -f -
apiVersion: stackgres.io/v1
kind: SGCluster
metadata:
  name: $RESTORED_CLUSTER_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  instances: 2
  postgres:
    version: "$E2E_POSTGRES_VERSION"
  sgInstanceProfile: size-s
  metadata:
    annotations:
      allResources:
        "iam.gke.io/gcp-service-account": "$K8S_GKE_SERVICEACCOUNT@$K8S_GKE_PROJECT.iam.gserviceaccount.com"
  pods:
    persistentVolume:
      size: '512Mi'
  initialData:
    restore:
      downloadDiskConcurrency: 10
      fromBackup:
        uid: "$BACKUP_UID"
EOF

  wait_pods_running "$CLUSTER_NAMESPACE" 2

  success "Cluster restored from backup $BACKUP_NAME"
}

check_restored_data() {
  REPLICA_RESPONSE="$(run_query -p 5432 -h "$RESTORED_CLUSTER_NAME-replicas" -c "$RESTORED_CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -i 1 -q "SELECT num FROM fibonacci ORDER BY num;" -d "test")"
  if [ "$(echo "$REPLICA_RESPONSE" | tr -d '\n')" = "123" ]
  then
    success "restore replica db restored successfully"
  else
    fail "replica db not restored"
  fi
}
